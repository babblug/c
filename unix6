Experiment -6
Aim: To write a C program to create a thread using pthreads library and let it run its 
function.
Description: These specifies a set of interfaces ( functions, header files) for threads 
programming commonly known as POSIX threads (or) pthreads. A single process 
can contain multiple threads, all of which are executing the same program. These 
threads are share the same global memory( data and heap segment), but each thread 
has its own stack. Every thread will have their own attributes like process 10, parent 
process 10 open the file descriptions, current directory and root directory, internal 
times and POSIX times, measurement of consumption of CPU time etc. some of 154
various other attributes that are distinic form one thread to other are thread 10 (the 
pthread_t datatype), the errono variable, real time scheduling policy and priority.
Most Pthreads functions returns return 0 on success and errno on failure.
Each of the threads in a process has a unique thread identifies (stored in the type 
pthread_t).
The identifier is returned to the caller of pthread pthread_create() and a thread can 
obtain its own thread identifier using pthread_self().
A new thread can be started by pthread_create included in <pthread.h>
Synopsis: #include<pthread.h>
Int pthread_create(pthread_t *thread,const pthread_attr_t *attr ,void 
*(*start_routine)(void *),void *age);
Compile and link with _pthread.
The pthread_create() function starts a new thread in the callin process. The new 
thread execution by invoking start_routine(); arg is passed as the sole argument of 
start_routine().
The new thread terminates as
-It call pthread_exit(), specifyinf as exit_status value that is available to another 
thread in the same process that calls pthread_join().
_It returns from start_routine(). This is equivalent to calling pthread_exit with the 
value supplied in return statement.
pthread_join with a terminated thread.
Synopsis: # include<pthread.h>
Int pthread_join(pthread_t thread, void **retval);
Compile and link with –pthread.155
The pthread_join() function waits for the thread specified by thread to terminate if 
that thread has already terminated. Then pthread_join() returns immediately. The 
thread specified by the thread must be joinable.
If retval is not NULL, then pthread_join() copies the exit status of the target 
thread(i.e the value that the target thread supplied to pthread_exit() into the location
pointed to by the *retval.
If multiple threads simultaneously try to join with the same thread, the results are 
undefined. If the thread calling pthread_join() is cancelled, then the target thread will 
return joinable.
Both pthread_create() and Pthread_join() return 0 in success, on error it returns as 
error number.
Program:
#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>
Void *print_msg_fun(void *ptr);
int main(){
pthread_t thread1, thread2;
char *msg1=”thread1 msg”;
char *msg2=”thread2 msg”;
int iret1,iret2;
iret1=pthread_create(&thread1,NULL,print_msg_fun,(void *)msg1);
iret2=pthread_create(&thread2,NULL,print_msg_fun,(void *)msg2);
pthread_join(thread1,NULL);
pthread_join(thread2,NULL);156
printf(“thread1 returned %d \n”,iret1);
printf(“thread2 returned %d \n”,iret2);
exit(0);
return 0;
}
Void *print_msgfun(void *ptr)
{
Step(5);
Char *msg;
msg =(char *)ptr;
printf(“%s\n”,msg);
}
Output :
thread1 msg
thread2 msg
thread1 returned()
thread2 returend()
Experiment -7
AIM: To write a c progr
